{"version":3,"sources":["reducer/helpReducer.js","reducer/rootReducer.js","store/Store.js","serviceWorker.js","index.js","const/ConstTypes.js"],"names":["INITIAL_STATE","isFetching","error","undefined","rootReducer","combineReducers","helpReducer","state","action","type","FETCHHELP","GETCATEGORIESHELP","getCategories","POSTCATEGORIESHELP","postCategories","DELETECATEGORIESHELP","deleteCategories","DELETEQUESTIONSHELP","deleteQuestions","ERRORHELP","data","enhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","thunk","store","createStore","Boolean","location","hostname","match","App","lazy","ReactDOM","render","fallback","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"oQASMA,EAAgB,CAClBC,WAAY,KACZC,WAAOC,GCJIC,EAJKC,YAAgB,CAChCC,YDUuB,WAAoC,IAAnCC,EAAkC,uDAA1BP,EAAeQ,EAAW,uCAE1D,OAAQA,EAAOC,MACX,KAAKC,IACD,OAAO,eACAH,EADP,CAEIN,YAAY,IAGpB,KAAKU,IACD,OAAO,eACAJ,EADP,CAEIK,cAAeJ,EAAOI,cACtBX,YAAY,IAGpB,KAAKY,IACD,OAAO,eACAN,EADP,CAEIO,eAAgBN,EAAOM,eACvBb,YAAY,IAGpB,KAAKc,IACD,OAAO,eACAR,EADP,CAEIS,iBAAkBR,EAAOQ,iBACzBf,YAAY,IAGpB,KAAKgB,IACD,OAAO,eACAV,EADP,CAEIW,gBAAiBV,EAAOU,gBACxBjB,YAAY,IAGpB,KAAKkB,IACD,OAAO,eACAZ,EADP,CAEIL,MAAOM,EAAOY,KACdnB,YAAY,IAGpB,QAAS,OAAOM,MEhDlBc,GALgB,kBAAXC,QACHA,OAAOC,qCACPD,OAAOC,qCAAqC,IACvCC,KAGTC,YAAgBC,MAKLC,EAFDC,YAAYxB,EAAaiB,GCFnBQ,QACW,cAA7BP,OAAOQ,SAASC,UAEe,UAA7BT,OAAOQ,SAASC,UAEhBT,OAAOQ,SAASC,SAASC,MACvB,2DCVN,IAAMC,EAAMC,gBAAK,kBAAM,sDAEvBC,IAASC,OAAO,kBAAC,IAAD,CAAUT,MAAOA,GAC/B,kBAAC,WAAD,CAAUU,SAAU,oDAClB,kBAACJ,EAAD,QAESK,SAASC,eAAe,SDqH/B,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA5C,GACL6C,QAAQ7C,MAAMA,EAAM8C,a,+BEzI5B,4MAAO,IAAMtC,EAAY,aACZC,EAAoB,eACpBE,EAAqB,gBAErBE,EAAuB,kBACvBE,EAAsB,oBACtBE,EAAY,e","file":"static/js/main.4ec31da4.chunk.js","sourcesContent":["import {\r\n    GETCATEGORIESHELP,\r\n    FETCHHELP,\r\n    ERRORHELP,\r\n    POSTCATEGORIESHELP,\r\n    DELETECATEGORIESHELP,\r\n    DELETEQUESTIONSHELP\r\n} from '../const/ConstTypes'\r\n\r\nconst INITIAL_STATE = {\r\n    isFetching: null,\r\n    error: undefined\r\n};\r\n\r\nexport const helpReducer = (state = INITIAL_STATE, action) => {\r\n\r\n    switch (action.type) {\r\n        case FETCHHELP: {\r\n            return {\r\n                ...state,\r\n                isFetching: true\r\n            }\r\n        }\r\n        case GETCATEGORIESHELP: {\r\n            return {\r\n                ...state,\r\n                getCategories: action.getCategories,\r\n                isFetching: false\r\n            }\r\n        }\r\n        case POSTCATEGORIESHELP: {\r\n            return {\r\n                ...state,\r\n                postCategories: action.postCategories,\r\n                isFetching: false\r\n            }\r\n        }\r\n        case DELETECATEGORIESHELP: {\r\n            return {\r\n                ...state,\r\n                deleteCategories: action.deleteCategories,\r\n                isFetching: false\r\n            }\r\n        }\r\n        case DELETEQUESTIONSHELP: {\r\n            return {\r\n                ...state,\r\n                deleteQuestions: action.deleteQuestions,\r\n                isFetching: false\r\n            }\r\n        }\r\n        case ERRORHELP: {\r\n            return {\r\n                ...state,\r\n                error: action.data,\r\n                isFetching: false\r\n            }\r\n        }\r\n        default: return state;\r\n    }\r\n}","import { combineReducers } from 'redux'\r\nimport { helpReducer } from './helpReducer'\r\n\r\nconst rootReducer = combineReducers({\r\n    helpReducer\r\n})\r\n\r\nexport default rootReducer","import { createStore, applyMiddleware, compose } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport rootReducer from '../reducer/rootReducer'\r\n\r\nconst composeEnhancers =\r\n    typeof window === 'object' &&\r\n        window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\r\n        window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\r\n        }) : compose;\r\n\r\nconst enhancer = composeEnhancers(\r\n    applyMiddleware(thunk),\r\n);\r\n\r\nconst store = createStore(rootReducer, enhancer);\r\n\r\nexport default store","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { lazy, Suspense } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport { Provider } from 'react-redux'\nimport store from './store/Store'\nimport * as serviceWorker from './serviceWorker';\n\nconst App = lazy(() => import('./App'))\n\nReactDOM.render(<Provider store={store}>\n  <Suspense fallback={<h1>Still Loadingâ€¦</h1>}>\n    <App />\n  </Suspense>\n</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();","export const FETCHHELP = 'FETCH_HELP'\r\nexport const GETCATEGORIESHELP = 'GET_HELP_CAT'\r\nexport const POSTCATEGORIESHELP = 'POST_HELP_CAT'\r\nexport const POSTQUESTHELP = 'POST_QUESTION_HELP'\r\nexport const DELETECATEGORIESHELP = 'DELETE_HELP_CAT'\r\nexport const DELETEQUESTIONSHELP = 'DELETE_QUEST_HELP'\r\nexport const ERRORHELP = 'ERROR_HELP'"],"sourceRoot":""}
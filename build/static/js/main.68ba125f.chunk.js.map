{"version":3,"sources":["const/ConstTypes.js","reducer/helpReducer.js","reducer/blogReducer.js","reducer/rootReducer.js","store/Store.js","serviceWorker.js","index.js"],"names":["FETCHHELP","GETCATEGORIESHELP","POSTCATEGORIESHELP","PATCHORDERHELP","DELETECATEGORIESHELP","DELETEQUESTIONSHELP","ERRORHELP","FETCHBLOG","GETARTICLES","GETSIMILARARTICLES","GETKINDS","GETKINDSCOUNT","DELETEBLOG","RESETDELETE","POSTARTICLE","RESETPOST","ERRORBLOG","INITIAL_STATE","isFetching","error","undefined","appReducer","combineReducers","helpReducer","state","action","type","getCategories","postCategories","deleteCategories","patchOrder","deleteQuestions","data","blogReducer","getArticles","postArticles","getArticlesSimilar","deleteBlog","getKinds","getKindsCount","rootReducer","All","enhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","thunk","store","createStore","Boolean","location","hostname","match","App","lazy","ReactDOM","render","fallback","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"kHAAA,kkBACO,IAAMA,EAAY,aACZC,EAAoB,eACpBC,EAAqB,gBAErBC,EAAiB,mBACjBC,EAAuB,kBACvBC,EAAsB,oBACtBC,EAAY,aAEZC,EAAY,aACZC,EAAc,eACdC,EAAqB,sBACrBC,EAAW,YACXC,EAAgB,kBAChBC,EAAa,cACbC,EAAc,qBACdC,EAAc,eACdC,EAAY,qBACZC,EAAY,c,iLCTnBC,EAAgB,CAClBC,WAAY,KACZC,WAAOC,GCFLH,EAAgB,CAAEC,WAAY,MCL9BG,EAAaC,YAAgB,CAC/BC,YFSuB,WAAoC,IAAnCC,EAAkC,uDAA1BP,EAAeQ,EAAW,uCAE1D,OAAQA,EAAOC,MACX,KAAK1B,IACD,OAAO,eACAwB,EADP,CAEIN,YAAY,IAGpB,KAAKjB,IACD,OAAO,eACAuB,EADP,CAEIG,cAAeF,EAAOE,cACtBT,YAAY,IAGpB,KAAKhB,IACD,OAAO,eACAsB,EADP,CAEII,eAAgBH,EAAOG,eACvBV,YAAY,IAGpB,KAAKd,IACD,OAAO,eACAoB,EADP,CAEIK,iBAAkBJ,EAAOI,iBACzBX,YAAY,IAGpB,KAAKf,IACD,OAAO,eACAqB,EADP,CAEIM,WAAYL,EAAOK,WACnBZ,YAAY,IAGpB,KAAKb,IACD,OAAO,eACAmB,EADP,CAEIO,gBAAiBN,EAAOM,gBACxBb,YAAY,IAGpB,KAAKZ,IACD,OAAO,eACAkB,EADP,CAEIL,MAAOM,EAAOO,KACdd,YAAY,IAGpB,QAAS,OAAOM,IE3DpBS,YDKuB,WAAoC,IAAnCT,EAAkC,uDAA1BP,EAAeQ,EAAW,uCAE1D,OAAQA,EAAOC,MACX,KAAKnB,IACD,OAAO,eACAiB,EADP,CAEIN,YAAY,IAGpB,KAAKV,IACD,OAAO,eACAgB,EADP,CAEIU,YAAaT,EAAOS,YACpBhB,YAAY,IAGpB,KAAKJ,IACD,OAAO,eACAU,EADP,CAEIW,aAAcV,EAAOU,aACrBjB,YAAY,IAGpB,KAAKT,IACD,OAAO,eACAe,EADP,CAEIY,mBAAoBX,EAAOS,YAC3BhB,YAAY,IAGpB,KAAKN,IACD,OAAO,eACAY,EADP,CAEIa,WAAYZ,EAAOY,WACnBnB,YAAY,IAGpB,KAAKR,IACD,OAAO,eACAc,EADP,CAEIc,SAAUb,EAAOa,SACjBpB,YAAY,IAGpB,KAAKP,IACD,OAAO,eACAa,EADP,CAEIe,cAAed,EAAOc,cACtBrB,YAAY,IAGpB,QAAS,OAAOM,MCxCTgB,EAbK,SAAChB,EAAOC,GAUxB,MAToB,mBAAhBA,EAAOC,OACPF,EAAMD,YAAYK,oBAAiBR,GAEnCK,EAAOC,OAASe,MAChBjB,EAAMS,YAAYI,gBAAajB,GAE/BK,EAAOC,OAASe,MAChBjB,EAAMS,YAAYE,kBAAef,GAE9BC,EAAWG,EAAOC,ICVvBiB,GALgB,kBAAXC,QACHA,OAAOC,qCACPD,OAAOC,qCAAqC,IACvCC,KAGTC,YAAgBC,MAKLC,EAFDC,YAAYT,EAAaE,GCFnBQ,QACW,cAA7BP,OAAOQ,SAASC,UAEe,UAA7BT,OAAOQ,SAASC,UAEhBT,OAAOQ,SAASC,SAASC,MACvB,2DCVN,IAAMC,EAAMC,gBAAK,kBAAM,sDAEvBC,IAASC,OAAO,kBAAC,IAAD,CAAUT,MAAOA,GAC/B,kBAAC,WAAD,CAAUU,SAAU,oDAClB,kBAACJ,EAAD,QAESK,SAASC,eAAe,SDqH/B,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAhD,GACLiD,QAAQjD,MAAMA,EAAMkD,c","file":"static/js/main.68ba125f.chunk.js","sourcesContent":["////////////HELP//////////////\r\nexport const FETCHHELP = 'FETCH_HELP'\r\nexport const GETCATEGORIESHELP = 'GET_HELP_CAT'\r\nexport const POSTCATEGORIESHELP = 'POST_HELP_CAT'\r\nexport const POSTQUESTHELP = 'POST_QUESTION_HELP'\r\nexport const PATCHORDERHELP = 'PATCH_ORDER_HELP'\r\nexport const DELETECATEGORIESHELP = 'DELETE_HELP_CAT'\r\nexport const DELETEQUESTIONSHELP = 'DELETE_QUEST_HELP'\r\nexport const ERRORHELP = 'ERROR_HELP'\r\n///////////BLOG////////////\r\nexport const FETCHBLOG = 'FETCH_BLOG'\r\nexport const GETARTICLES = 'GET_ARTICLES'\r\nexport const GETSIMILARARTICLES = 'GET_SIMILARARTICLES'\r\nexport const GETKINDS = 'GET_KINDS'\r\nexport const GETKINDSCOUNT = 'GET_KINDS_COUNT'\r\nexport const DELETEBLOG = 'DELETE_BLOG'\r\nexport const RESETDELETE = 'RESET_DELETED_BLOG'\r\nexport const POSTARTICLE = 'POST_ARTICLE'\r\nexport const RESETPOST = 'RESET_POST_ARTICLE'\r\nexport const ERRORBLOG = 'ERROR_BLOG'","import {\r\n    GETCATEGORIESHELP,\r\n    FETCHHELP,\r\n    ERRORHELP,\r\n    POSTCATEGORIESHELP,\r\n    DELETECATEGORIESHELP,\r\n    DELETEQUESTIONSHELP,\r\n    PATCHORDERHELP\r\n} from '../const/ConstTypes'\r\n\r\nconst INITIAL_STATE = {\r\n    isFetching: null,\r\n    error: undefined\r\n};\r\n\r\nexport const helpReducer = (state = INITIAL_STATE, action) => {\r\n\r\n    switch (action.type) {\r\n        case FETCHHELP: {\r\n            return {\r\n                ...state,\r\n                isFetching: true\r\n            }\r\n        }\r\n        case GETCATEGORIESHELP: {\r\n            return {\r\n                ...state,\r\n                getCategories: action.getCategories,\r\n                isFetching: false\r\n            }\r\n        }\r\n        case POSTCATEGORIESHELP: {\r\n            return {\r\n                ...state,\r\n                postCategories: action.postCategories,\r\n                isFetching: false\r\n            }\r\n        }\r\n        case DELETECATEGORIESHELP: {\r\n            return {\r\n                ...state,\r\n                deleteCategories: action.deleteCategories,\r\n                isFetching: false\r\n            }\r\n        }\r\n        case PATCHORDERHELP: {\r\n            return {\r\n                ...state,\r\n                patchOrder: action.patchOrder,\r\n                isFetching: false\r\n            }\r\n        }\r\n        case DELETEQUESTIONSHELP: {\r\n            return {\r\n                ...state,\r\n                deleteQuestions: action.deleteQuestions,\r\n                isFetching: false\r\n            }\r\n        }\r\n        case ERRORHELP: {\r\n            return {\r\n                ...state,\r\n                error: action.data,\r\n                isFetching: false\r\n            }\r\n        }\r\n        default: return state;\r\n    }\r\n}","import {\r\n    FETCHBLOG,\r\n    GETARTICLES,\r\n    GETSIMILARARTICLES,\r\n    GETKINDS,\r\n    GETKINDSCOUNT,\r\n    POSTARTICLE,\r\n    DELETEBLOG\r\n} from '../const/ConstTypes'\r\n\r\nconst INITIAL_STATE = { isFetching: null };\r\n\r\nexport const blogReducer = (state = INITIAL_STATE, action) => {\r\n\r\n    switch (action.type) {\r\n        case FETCHBLOG: {\r\n            return {\r\n                ...state,\r\n                isFetching: true\r\n            }\r\n        }\r\n        case GETARTICLES: {\r\n            return {\r\n                ...state,\r\n                getArticles: action.getArticles,\r\n                isFetching: false\r\n            }\r\n        }\r\n        case POSTARTICLE: {\r\n            return {\r\n                ...state,\r\n                postArticles: action.postArticles,\r\n                isFetching: false\r\n            }\r\n        }\r\n        case GETSIMILARARTICLES: {\r\n            return {\r\n                ...state,\r\n                getArticlesSimilar: action.getArticles,\r\n                isFetching: false\r\n            }\r\n        }\r\n        case DELETEBLOG: {\r\n            return {\r\n                ...state,\r\n                deleteBlog: action.deleteBlog,\r\n                isFetching: false\r\n            }\r\n        }\r\n        case GETKINDS: {\r\n            return {\r\n                ...state,\r\n                getKinds: action.getKinds,\r\n                isFetching: false\r\n            }\r\n        }\r\n        case GETKINDSCOUNT: {\r\n            return {\r\n                ...state,\r\n                getKindsCount: action.getKindsCount,\r\n                isFetching: false\r\n            }\r\n        }\r\n        default: return state;\r\n    }\r\n}","import * as All from '../const/ConstTypes'\r\nimport { combineReducers } from 'redux'\r\nimport { helpReducer } from './helpReducer'\r\nimport { blogReducer } from './blogReducer'\r\n\r\nconst appReducer = combineReducers({\r\n    helpReducer,\r\n    blogReducer\r\n})\r\n\r\nconst rootReducer = (state, action) => {\r\n    if (action.type === 'RESET_HELPPOST') {\r\n        state.helpReducer.postCategories = undefined\r\n    }\r\n    if (action.type === All.RESETDELETE) {\r\n        state.blogReducer.deleteBlog = undefined\r\n    }\r\n    if (action.type === All.RESETPOST) {\r\n        state.blogReducer.postArticles = undefined\r\n    }\r\n    return appReducer(state, action)\r\n}\r\n\r\nexport default rootReducer","import { createStore, applyMiddleware, compose } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport rootReducer from '../reducer/rootReducer'\r\n\r\nconst composeEnhancers =\r\n    typeof window === 'object' &&\r\n        window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\r\n        window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\r\n        }) : compose;\r\n\r\nconst enhancer = composeEnhancers(\r\n    applyMiddleware(thunk),\r\n);\r\n\r\nconst store = createStore(rootReducer, enhancer);\r\n\r\nexport default store","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React, { lazy, Suspense } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n// import App from './App';\r\nimport { Provider } from 'react-redux'\r\nimport store from './store/Store'\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst App = lazy(() => import('./App'))\r\n\r\nReactDOM.render(<Provider store={store}>\r\n  <Suspense fallback={<h1>Still Loading…</h1>}>\r\n    <App />\r\n  </Suspense>\r\n</Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}